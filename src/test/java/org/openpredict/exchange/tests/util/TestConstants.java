package org.openpredict.exchange.tests.util;

import com.google.common.collect.Sets;
import org.openpredict.exchange.beans.CoreSymbolSpecification;
import org.openpredict.exchange.beans.SymbolType;

import java.util.Set;

public final class TestConstants {


    public static final int SYMBOL_MARGIN = 5991;
    public static final int SYMBOL_EXCHANGE = 9269;

    public static final long UID_1 = 1442412;
    public static final long UID_2 = 1442413;

    public static final int SYMBOL_AUTOGENERATED_RANGE_START = 40000;

    public static final int CURRENECY_USD = 840;
    public static final int CURRENECY_EUR = 978;

    public static final int CURRENECY_XBT = 3762; // satoshi, 10-8
    public static final int CURRENECY_ETH = 3928; // szabo, 10-6
    public static final int CURRENECY_LTC = 4141;
    public static final int CURRENECY_XDG = 4142;
    public static final int CURRENECY_GRC = 4143;
    public static final int CURRENECY_XPM = 4144;
    public static final int CURRENECY_XRP = 4145;
    public static final int CURRENECY_DASH = 4146;
    public static final int CURRENECY_XMR = 4147;
    public static final int CURRENECY_XLM = 4148;
    public static final int CURRENECY_ETC = 4149;
    public static final int CURRENECY_ZEC = 4150;


    public static final Set<Integer> CURRENCIES_FUTURES = Sets.newHashSet(
            CURRENECY_USD,
            CURRENECY_EUR);

    public static final Set<Integer> CURRENCIES_EXCHANGE = Sets.newHashSet(
            CURRENECY_ETH,
            CURRENECY_XBT);


    public static final Set<Integer> ALL_CURRENCIES = Sets.newHashSet(
            CURRENECY_USD,
            CURRENECY_EUR,
            CURRENECY_XBT,
            CURRENECY_LTC,
            CURRENECY_XDG,
            CURRENECY_GRC,
            CURRENECY_XPM,
            CURRENECY_XRP,
            CURRENECY_DASH,
            CURRENECY_XMR,
            CURRENECY_XLM,
            CURRENECY_ETC,
            CURRENECY_ZEC);

    public static final CoreSymbolSpecification SYMBOLSPEC_EUR_USD = CoreSymbolSpecification.builder()
            .symbolId(SYMBOL_MARGIN)
            .type(SymbolType.FUTURES_CONTRACT)
            .baseCurrency(CURRENECY_EUR)
            .quoteCurrency(CURRENECY_USD)
            .baseScaleK(1)
            .quoteScaleK(1)
            .depositBuy(2200)
            .depositSell(3210)
            .takerFee(0)
            .makerFee(0)
            .build();

    public static final CoreSymbolSpecification SYMBOLSPEC_ETH_XBT = CoreSymbolSpecification.builder()
            .symbolId(SYMBOL_EXCHANGE)
            .type(SymbolType.CURRENCY_EXCHANGE_PAIR)
            .baseCurrency(CURRENECY_ETH)    // base = szabo
            .quoteCurrency(CURRENECY_XBT)   // quote = satoshi
            .baseScaleK(100_000)            // 1 lot = 100K szabo (0.1 ETH)
            .quoteScaleK(10)                // 1 step = 10 satoshi
            .takerFee(0)
            .makerFee(0)
            .build();


}
